in file.maude .

omod SLURP is
  ex FILE .
  ex LIST*{String} .
  pr SPLIT .

  class Me | Acc : String .
  op me : -> Oid .
  op run_ : String -> Configuration .
  var fname : String .
  var As : AttributeSet .
  var sfil : Oid .
  var X Y Z : String .
  var acc : String .
  var line : String .
  var garbage : String .
  op getstr : Object -> String .
  var out : String .
  var M : Nat .
  op slurp_ : String -> String .
  op fln : String -> List{String} .

  eq fln(X) = ssplit(slurp X,"\n") .
  eq getstr( < me : Me | Acc : out > ) = out .
  eq slurp fname = getstr(run fname) .
  eq run fname = <>
  < me : Me | Acc : "" > openFile(fileManager, me, fname, "r") .
  rl < me : Me | As > openedFile(me, fileManager, sfil) =>
    < me : Me | As > getLine(sfil, me) .
  rl < me : Me | Acc : acc, As > gotLine(me, sfil, line) =>
    < me : Me | Acc : acc + line, As >
    if line == "" then closeFile(sfil, me) else getLine(sfil,me) fi . 
  rl < me : Me | As > fileError(me, sfil, garbage) =>
    < me : Me | Acc : garbage, As > closeFile(sfil, me) .
  rl <> < me : Me | As > closedFile(me, sfil) => < me : Me | As > .
endom

mod SPLIT is
  ex LIST*{String} .
  var X Y Z : String .
  var M N : Nat .
  op ssplit : String String -> List{String} .
  op sp1 : String Nat Nat -> List{String} .
  op sp3 : List{String} String -> List{String} .

  eq sp1(X, notFound, M) = X "" .
  eq sp1(X, N, M) = substr(X , 0 , N) substr(X, N + M , length(X)) . 
  eq sp3(X Y,Z) = append([X], ssplit(Y,Z)) .
  eq ssplit("", Y) = [] .
  eq ssplit(X, Y) = sp3(sp1(X, find(X,Y,0), length(Y)),Y) . 
endm

*** (
mod FUNC{X :: TRIV} is
  ex LIST*{X} .
  pr META-TERM . 
  var F : Term .
  var Y : List{X} .
  op map : X List{X} -> List{X} .
  
  eq map(F, Y) = append( [F head(Y)], map(F, tail(Y)) ) .
endm 
)
